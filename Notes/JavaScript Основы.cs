Переменная - способ сохранить информацию и дать ей имя для последующего использования. Это именованное хранилище данных.
let,var
Локальная переменная - объявленная внутри блока кода.
Если задали переменную локальную внутри блока, а потом снаружи вызываем функцию, то после вызова этой функции переменная становится глобальной.

Конкатенация - склеивание строк.
Интерполяция - способ соединения строк через вставку значений переменных в строку - шаблон с помощью фигурных скобок: 'Hi, ${name}!' Работает только со строками в бэктиках''
Примитивные типы: строка, целое и рациональное число.
Функция - операция, способная принимать данные и возвращать результат.
Аргумент - информация, которую функция получае при вызове.
Сигнатура функции - формальное описание типов аргументов и типа возвращаемого значения функции.

JS -интерпритируемый, динамический язык. 
3 сильные стороны:
- полная интеграция с HTML/CSS
- простые вещи делаются просто
- поддерживается всеми браузерами, включен по умолчанию.

Транспилируется - конвертируется.

Среды разработки:
- Visual Studio Code (бессплатно)
- WebStorm (платно)
- Atom - кроссплатформенная, бесплатно
- Sublime Text - кросспл., условно-беспл.
- Notepad ++ (Windows, платный)

Динамически типизированный - типы данных есть, но переменные не привязаны ни к одному из них.

в JS есть 7 типов:
1. number
2. string
3. boolean
4. null
5. underfined
6. object
7. symbol

Оператор typeof позволяет увидеть, какой тип данных сохранен в переменной.

prompt (question, [default])
- Задает вопрос и возвращает то, что ввел пользователь, либо null, если введена отмена

confirm (question)
- Задает вопрос и предлагает выбрать ок или отмена. Выбор возвращается в формате true false

alert (message)
выводит сообщение message
_______________________________________________________________________
Строки

Есть три типа кавычек. Строки, использующие обратные кавычки, могут занимать более одной строки в коде и включать выражения ${…}.
Строки в JavaScript кодируются в UTF-16.
Есть специальные символы, такие как \n, и можно добавить символ по его юникодному коду, используя \u….
Для получения символа используйте [].
Для получения подстроки используйте slice или substring.
Для того, чтобы перевести строку в нижний или верхний регистр, используйте toLowerCase/toUpperCase.
Для поиска подстроки используйте indexOf или includes/startsWith/endsWith, когда надо только проверить, есть ли вхождение.
Чтобы сравнить строки с учётом правил языка, используйте localeCompare.
Строки также имеют ещё кое-какие полезные методы:

str.trim() — убирает пробелы в начале и конце строки.
str.repeat(n) — повторяет строку n раз.
…и другие, которые вы можете найти в справочнике.

____________________________________________________________________________
Обработчик событий
_____________________________________________________________________________

Есть три способа назначения обработчиков событий:

Атрибут HTML: onclick="...".
DOM-свойство: elem.onclick = function.
Специальные методы: elem.addEventListener(event, handler[, phase]) для добавления, removeEventListener для удаления.
HTML-атрибуты используются редко потому, что JavaScript в HTML-теге выглядит немного странно. К тому же много кода там не напишешь.

DOM-свойства вполне можно использовать, но мы не можем назначить больше одного обработчика на один тип события. Во многих случаях с этим ограничением можно мириться.

Последний способ самый гибкий, однако нужно писать больше всего кода. Есть несколько типов событий, которые работают только через него, к примеру transtionend и DOMContentLoaded. Также addEventListener поддерживает объекты в качестве обработчиков событий. В этом случае вызывается метод объекта handleEvent.

Не важно, как вы назначаете обработчик – он получает объект события первым аргументом. Этот объект содержит подробности о том, что произошло.

